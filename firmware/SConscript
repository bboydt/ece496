# Builds Firmware

import os

Import("*")


# Create Firmware Environment
gnu_flags = [
    "-Wall",
    "-march=rv32imc_zicsr_zifencei",
    "-mabi=ilp32",
    "-O0",
    "-ffunction-sections",
    "-fdata-sections",
    #"-flto",
    "-nostartfiles",
    "-mno-fdiv",
    "-mstrict-align",
    "-mbranch-cost=10",
    "-nostdlib",
    "-Wl,--gc-sections",
    "-g"
]

fw_env = env.Clone(
    toolpath = [deps_dir.Dir("scons-dfu")],
    tools = ["dfu"],

    CC = "riscv64-unknown-elf-gcc",
    AS = "riscv64-unknown-elf-gcc",
    LINK = "riscv64-unknown-elf-gcc",
    AR = "riscv64-unknown-elf-gcc-ar",
    RANLIB = "riscv64-unknown-elf-gcc-ranlib",
    OBJCOPY = "riscv64-unknown-elf-objcopy",

    CPPPATH = [
        Dir("shared/include").srcnode(),
        deps_dir.Dir("rt/include").srcnode(),
        deps_dir.Dir("rt/arch/riscv/include").srcnode(),
        deps_dir.Dir("neorv32/sw/lib/include").srcnode()
    ],
    CPPDEFINES = {"RT_CYCLE_ENABLE": 0},
    CCFLAGS = gnu_flags,
    ASFLAGS = gnu_flags,
    CFLAGS = ["-std=gnu17"],
    CXXFLAGS = [
        "-std = gnu++23",
        "-Wno-missing-field-initializers",
        "-fno-threadsafe-statics",
        "-fno-exceptions",
    ],
    LINKFLAGS = gnu_flags,
    LINKCOM = "$LINK -o ${TARGETS[0]} -Wl,-Map,${TARGETS[1]} $LINKFLAGS $SOURCES"
    "$_LIBDIRFLAGS -Wl,--start-group $_LIBFLAGS -Wl,--end-group",
    PROGSUFFIX = ".elf",

    # printing
    #CCCOMSTR     = "cc $TARGET",
    CXXCOMSTR    = "c++ $TARGET",
    ASCOMSTR     = "as $TARGET",
    ASPPCOMSTR   = "as $TARGET",
    INKCOMSTR   = "ld $TARGET",
    ARCOMSTR     = "ar $TARGET",
    RANLIBCOMSTR = "ranlib $TARGET",
    
    DFUSUFFIXFLAGS = "-v 1209 -p 5af1"
)

fw_env.Append(CPPSUFFIX = ".s")


# Build Libraries
base_lib_env = fw_env.Clone()

libneorv32 = SConscript(
    deps_dir.File("SConscript-neorv32"),
    variant_dir = "lib/neorv32",
    duplicate = False,
    exports = {
        "env": base_lib_env,
        "neorv32_dir": deps_dir.Dir("neorv32")
    }
)

librt = SConscript(
    dirs = deps_dir.Dir("rt/src"),
    variant_dir = "lib/rt",
    duplicate = False,
    exports = {
        "env": base_lib_env
    }
)

librt_riscv = SConscript(
    dirs = deps_dir.Dir("rt/arch/riscv"),
    variant_dir = "lib/rt/riscv",
    duplicate = False,
    exports = {
        "env": base_lib_env
    }
)

libs = {
    "rt": librt,
    "rt-riscv": librt_riscv,
    "neorv32": libneorv32,
    "stdlib": None,
    "i2c": None,
    "start": None,
    "start-rt": None,
    "server": None,
}

for lib in libs:
    if libs[lib] is None:
        lib_env = base_lib_env.Clone()
        lib_env.Append(CPPPATH=Dir(f"{lib}/include").srcnode())
        libs[lib] = SConscript(
            dirs = lib,
            variant_dir = "lib/" + lib,
            duplicate = False,
            exports = {
                "env": lib_env
            }
        )


# Build Apps
# each app needs an ld_scripts and libs value
apps = {
    "bootrom": {
        "ld_scripts": [ "shared/ld/memory.ld", "shared/ld/sections-boot.ld" ],
        "libs": []
    },
    
    #"blinky": {
    #    "ld_scripts": [ "shared/ld/memory.ld", "shared/ld/sections-app.ld" ],
    #    "libs": [ libs["neorv32"], libs["start-rt"], libs["rt"], libs["rt-riscv"] ]
    #},
   
    #"m1": {
    #    "ld_scripts": [ "shared/ld/memory.ld", "shared/ld/sections-app.ld" ],
    #    "libs": [ libs["neorv32"], libs["start"], libs["newlib"] ]
    #},

    #"m2": {
    #    "ld_scripts": [ "shared/ld/memory.ld", "shared/ld/sections-app.ld" ],
    #    "libs": [ libs["neorv32"], libs["start-rt"], libs["rt"], libs["rt-riscv"], libs["server"] ]
    #},

    "motor_test": {
        "ld_scripts": [ "shared/ld/memory.ld", "shared/ld/sections-app.ld" ],
        "libs": [ "neorv32", "start-rt", "rt", "rt-riscv", "stdlib" ]
    },

    "walleos": {
        "ld_scripts": [ "shared/ld/memory.ld", "shared/ld/sections-app.ld" ],
        "libs": [ "neorv32", "start-rt", "rt", "rt-riscv", "stdlib", "i2c", "server" ]
    },
}

if target_app is not None:
    apps = {target_app: apps[target_app]}

for app in apps:

    # add linker scripts to the linker flags and make the app an dependent of them
    ld_scripts = [File(x).srcnode() for x in apps[app]["ld_scripts"]]
    ld_flags = [f"-Wl,-T,{f.path}" for f in ld_scripts]
    def ld_emitter(target, source, env):
        map_file = os.path.splitext(str(target[0]))[0] + ".map"
        env.Depends(target, ld_scripts)
        return target + [map_file], source

    app_env = fw_env.Clone()
    app_libs = [libs[x] for x in apps[app]["libs"]]
    app_env.Replace(LIBS = app_libs)
    app_env.Append(
        LINKFLAGS = ld_flags,
        PROGEMITTER = ld_emitter,
        CPPPATH = [app],
    )
    app_env.Append(LINKFLAGS = ["-march=rv32imac", "-mabi=ilp32"])

    app = SConscript(
        dirs = app,
        variant_dir = "app/" + app,
        duplicate = False,
        exports = {
            "env": app_env
        }
    )
